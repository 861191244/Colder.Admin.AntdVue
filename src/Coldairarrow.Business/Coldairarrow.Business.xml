<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coldairarrow.Business</name>
    </assembly>
    <members>
        <member name="T:Coldairarrow.Business.BaseBusiness`1">
            <summary>
            描述：业务处理基类
            </summary>
            <typeparam name="T">泛型约束（数据库实体）</typeparam>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.#ctor(EFCore.Sharding.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="repository">注入通用仓储</param>
        </member>
        <member name="P:Coldairarrow.Business.BaseBusiness`1.Service">
            <summary>
            业务仓储接口(支持软删除),支持联表操作
            注：仅支持单线程操作
            </summary>
        </member>
        <member name="P:Coldairarrow.Business.BaseBusiness`1.FullService">
            <summary>
            完整业务仓储接口(不支持软删除),支持联表操作
            注：仅支持单线程操作
            </summary>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Insert(`0)">
            <summary>
            添加数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.InsertAsync(`0)">
            <summary>
            添加数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Insert(System.Collections.Generic.List{`0})">
            <summary>
            添加多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.InsertAsync(System.Collections.Generic.List{`0})">
            <summary>
            添加多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.BulkInsert(System.Collections.Generic.List{`0})">
            <summary>
            批量添加数据,速度快
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.DeleteAll">
            <summary>
            删除所有数据
            </summary>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.DeleteAllAsync">
            <summary>
            删除所有数据
            </summary>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Delete(System.String)">
            <summary>
            删除指定主键数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.DeleteAsync(System.String)">
            <summary>
            删除指定主键数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            通过主键删除多条数据
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.DeleteAsync(System.Collections.Generic.List{System.String})">
            <summary>
            通过主键删除多条数据
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Delete(`0)">
            <summary>
            删除单条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.DeleteAsync(`0)">
            <summary>
            删除单条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.DeleteAsync(System.Collections.Generic.List{`0})">
            <summary>
            删除多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除指定条件数据
            </summary>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除指定条件数据
            </summary>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Delete_Sql(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用SQL语句按照条件删除数据
            用法:Delete_Sql"Base_User"(x=&gt;x.Id == "Admin")
            注：生成的SQL类似于DELETE FROM [Base_User] WHERE [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">条件</param>
            <returns>
            影响条数
            </returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Delete_SqlAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用SQL语句按照条件删除数据
            用法:Delete_Sql"Base_User"(x=&gt;x.Id == "Admin")
            注：生成的SQL类似于DELETE FROM [Base_User] WHERE [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">条件</param>
            <returns>
            影响条数
            </returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Update(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.UpdateAsync(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            更新多条数据
            </summary>
            <param name="entities">数据列表</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.UpdateAsync(System.Collections.Generic.List{`0})">
            <summary>
            更新多条数据
            </summary>
            <param name="entities">数据列表</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0})">
            <summary>
            指定条件更新
            </summary>
            <param name="whereExpre">筛选表达式</param>
            <param name="set">更改属性回调</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.UpdateWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0})">
            <summary>
            指定条件更新
            </summary>
            <param name="whereExpre">筛选表达式</param>
            <param name="set">更改属性回调</param>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.UpdateWhere_Sql(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">筛选条件</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.UpdateWhere_SqlAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">筛选条件</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.GetEntity(System.Object[])">
            <summary>
            获取实体
            </summary>
            <param name="keyValue">主键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.GetEntityAsync(System.Object[])">
            <summary>
            获取实体
            </summary>
            <param name="keyValue">主键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.GetList">
            <summary>
            获取表的所有数据，当数据量很大时不要使用！
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.GetListAsync">
            <summary>
            获取表的所有数据，当数据量很大时不要使用！
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.GetIQueryable">
            <summary>
            获取实体对应的表，延迟加载，主要用于支持Linq查询操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.GetPagination``1(System.Linq.IQueryable{``0},Coldairarrow.Util.Pagination)">
            <summary>
            获取分页后的数据
            </summary>
            <typeparam name="U">实体类型</typeparam>
            <param name="query">数据源IQueryable</param>
            <param name="pagination">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.GetPagination``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            获取分页后的数据
            </summary>
            <typeparam name="U">实体参数</typeparam>
            <param name="query">IQueryable数据源</param>
            <param name="pageIndex">当前页</param>
            <param name="pageRows">每页行数</param>
            <param name="orderColumn">排序列</param>
            <param name="orderType">排序类型</param>
            <param name="count">总记录数</param>
            <param name="pages">总页数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Success">
            <summary>
            返回成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Success``1(``0)">
            <summary>
            返回成功
            </summary>
            <param name="data">返回数据</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Success``1(``0,System.String)">
            <summary>
            返回成功
            </summary>
            <param name="data">返回数据</param>
            <param name="msg">返回消息</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Error">
            <summary>
            返回错误
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.Error(System.String)">
            <summary>
            返回错误
            </summary>
            <param name="msg">错误提示</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.GetOptionListAsync(System.String,System.String)">
            <summary>
            构建前端Select远程搜索数据
            </summary>
            <param name="selectedValueJson">已选择的项，JSON数组</param>
            <param name="q">查询关键字</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.BaseBusiness`1.GetOptionListAsync(System.String,System.String,System.String,System.String,System.Linq.IQueryable{`0})">
            <summary>
            构建前端Select远程搜索数据
            </summary>
            <param name="selectedValueJson">已选择的项，JSON数组</param>
            <param name="q">查询关键字</param>
            <param name="textFiled">文本字段</param>
            <param name="valueField">值字段</param>
            <param name="source">指定数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.Base_Manage.BuildCodeBusiness.GetAllDbLink">
            <summary>
            获取所有数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Business.Base_Manage.BuildCodeBusiness.GetDbTableList(System.String)">
            <summary>
            获取数据库所有表
            </summary>
            <param name="linkId">数据库连接Id</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Business.BusRepository">
            <summary>
            业务仓储类,全局控制业务相关操作
            软删除:查询:获取Deleted=false,删除:更新Deleted=true
            其它:按照具体业务修改
            </summary>
        </member>
        <member name="T:Coldairarrow.Business.Operator">
            <summary>
            操作者
            </summary>
        </member>
        <member name="P:Coldairarrow.Business.Operator.UserId">
            <summary>
            当前操作者UserId
            </summary>
        </member>
        <member name="P:Coldairarrow.Business.Operator.Property">
            <summary>
            属性
            </summary>
        </member>
        <member name="M:Coldairarrow.Business.Operator.IsAdmin">
            <summary>
            判断是否为超级管理员
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
